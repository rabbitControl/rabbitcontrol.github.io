{"version":3,"sources":["ElementWrapper.tsx","ParameterSlider.tsx","ParameterNumberInput.tsx","Globals.ts","ParameterTextInput.tsx","ParameterCheckbox.tsx","ParameterColorInput.tsx","ParameterHTMLSelect.tsx","ParameterButton.tsx","ParameterFoldableGroup.tsx","ParameterWidget.tsx","ConnectionDialog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parameterWrapped","config","Component","_class","_temp","_React$Component","ParameterComponentWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ignoreReadonly","undefined","handleValue","value","param","state","parameter","ValueParameter","onSubmitCb","BangParameter","doBang","setState","handleParameterValueChange","App","VERBOSE_LOG","console","log","concat","userid","handleParameterChange","label","description","readonly","inherits","createClass","key","registerElement","unregisterParameterHandlers","unregisterElement","registerParameterHandlers","error","react","assign","disabled","addValueChangeListener","addChangeListener","removeValueChangedListener","removeChangedListener","React","displayName","name","ParameterSliderC","handleChange","continuous","handleRelease","renderLabel","val","unit","toFixed","typeDefinition","style","whiteSpace","dimensions","width","height","isFloat","min","max","readOnly","_this2","step","numdef","minimum","maximum","valueRange","datatype","RcpTypes","Datatype","FLOAT32","FLOAT64","multipleof","react_measure_default","a","onResize","contentRect","entry","_ref","measureRef","ref","slider","stepSize","labelPrecision","labelStepSize","onChange","onRelease","labelRenderer","ParameterNumericInputC","valueAsString","numericInput","minorStepSize","onValueChange","selectAllOnFocus","buttonPosition","Position","RIGHT","placeholder","parameterLabelStyle","color","Colors","GRAY1","fontSize","SSL_INFO_TEXT","ParameterTextInputC","event","target","handleSubmit","preventDefault","setStringValue","onSubmit","inputGroup","ParameterCheckboxC","checked","controls","alignIndicator","LEFT","large","ParameterColorInputC","type","ParameterHTMLSelectC","entries","EnumParameter","enumDefinition","htmlSelect","className","renderOptions","sel","map","e","ParameterButtonC","handleClick","confirmation","widget","needsConfirmation","handleDialogOpen","doSendBang","isOpen","handleDialogConfirm","handleDialogCancel","ld","labelDisabled","buttons","text","onClick","alert_alert","canEscapeKeyCancel","cancelButtonText","confirmButtonText","icon","intent","Intent","DANGER","onCancel","onConfirm","confirmationText","ParameterFoldableGroupC","handleButtonClick","controlGroup","vertical","marginLeft","text_text","collapse","children","COMPONENT_DEFAULT_COLOR","ParameterWidget","getWidth","handleValueChange","handleValueSubmit","setDirty","enabled","p","id","_this3","GroupParameter","createChildWidget","SliderWidget","NumberParameter","ParameterSlider_ParameterSliderC","ParameterNumberInput_ParameterNumericInputC","Vector3F32Parameter","BooleanParameter","ParameterCheckbox_ParameterCheckboxC","RGBAParameter","RGBParameter","ParameterColorInput_ParameterColorInputC","ParameterHTMLSelect_ParameterHTMLSelectC","ImageParameter","blob","Blob","url","window","URL","createObjectURL","src","alt","ParameterTextInput_ParameterTextInputC","ParameterFoldableGroup_ParameterFoldableGroupC","renderChildren","ParameterButton_ParameterButtonC","marginTop","marginBottom","card","interactive","renderValue","ConnectionDialog","myParameters","updateClient","client","update","setHost","host","currentTarget","setPort","port","parseInt","handleAlertConfirm","doConnect","doDisconnect","connected","disconnected","onError","parameterAdded","parameterRemoved","dispose","resetUI","Client","VERBOSE","WebSocketClientTransporter","_assertThisInitialize","assertThisInitialized","connect","isConnected","JSON","stringify","parent","params","slice","push","addTimer","clearTimeout","setTimeout","parameters","index","indexOf","splice","removeTimer","location","hostname","ParameterWidget_ParameterWidget","createParameterWidget","createWidgets","NONE","alignItems","returnSSLInfo","isSSL","document","toString","startsWith","isFirefox","navigator","userAgent","stopTimers","react_default","createElement","margin","ConnectionDialog_ConnectionDialog","Boolean","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAyCaA,EAAmB,SAACC,GAAD,OAC3B,SACGC,GAEC,IAAAC,EAAAC,EAsJD,OAlJYA,EAAAD,EAAA,SAAAE,GAKR,SAAAC,EAAYC,GAAoB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC5BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHFQ,eAAiBd,EAASA,EAAOc,oBAAiBC,EAE1BR,EA8DhCS,YAAc,SAACC,GACX,IAAMC,EAAQX,EAAKY,MAAMC,UACrBF,aAAiBG,kBACjBH,EAAMD,MAAQA,EACdV,EAAKD,MAAMgB,cACJJ,aAAiBK,kBACxBL,EAAMM,SACNjB,EAAKD,MAAMgB,cAGff,EAAKkB,SAAS,CACVR,MAAOA,KAzEiBV,EAkGxBmB,2BAA6B,SAACN,GAE9BA,aAAqBC,mBAEjBM,EAAIC,aACJC,QAAQC,IAAR,yBAAAC,OAAqCX,EAAUY,OAA/C,OAAAD,OAA2DX,EAAUH,QAGzEV,EAAKkB,SAAS,CACVR,MAAOG,EAAUH,UA3GGV,EAgHxB0B,sBAAwB,SAACb,GAC7Bb,EAAKkB,SAAS,CACVS,MAAOd,EAAUc,MACjBC,YAAaf,EAAUe,YACvBC,SAAUhB,EAAUgB,YAlHxB7B,EAAKY,MAAQ,CACTe,MAAO3B,EAAKD,MAAM4B,MAClBjB,MAAO,KACPG,eAAWL,GALaR,EALxB,OAAAC,OAAA6B,EAAA,EAAA7B,CAAAH,EAAAD,GAAAI,OAAA8B,EAAA,EAAA9B,CAAAH,EAAA,EAAAkC,IAAA,oBAAAtB,MAAA,WAgBJP,KAAKJ,MAAMkC,gBAAgB9B,QAhBvB,CAAA6B,IAAA,uBAAAtB,MAAA,WAqBJ,IAAMC,EAAQR,KAAKS,MAAMC,UACrBF,GACAR,KAAK+B,4BAA4BvB,GAGrCR,KAAKJ,MAAMoC,kBAAkBhC,QA1BzB,CAAA6B,IAAA,eAAAtB,MAAA,SAkCKG,GAELA,EAAUY,SAAWtB,KAAKJ,MAAM0B,QAKhCL,EAAIC,aACJC,QAAQC,IAAR,6BAAAC,OAAyCrB,KAAKJ,MAAM0B,OAApD,MAGJtB,KAAKiC,0BAA0BvB,GAC/BV,KAAKe,SAAS,CACVL,UAAWA,EACXc,MAAOd,EAAUc,MACjBE,SAAUhB,EAAUgB,YAZpBP,QAAQe,MAAR,+BAAAb,OAA6CX,EAAUY,OAAvD,eAAAD,OAA2ErB,KAAKJ,MAAM0B,WArCtF,CAAAO,IAAA,kBAAAtB,MAAA,SAqDQC,GACZR,KAAK+B,4BAA4BvB,GACjCR,KAAKe,SAAS,CACVL,eAAWL,MAxDX,CAAAwB,IAAA,YAAAtB,MAAA,WA6DJ,OAAOP,KAAKJ,MAAM0B,SA7Dd,CAAAO,IAAA,SAAAtB,MAAA,WAuFJ,IAAMC,EAAQR,KAAKS,MAAMC,UACnBgB,EAAW1B,KAAKS,MAAMiB,SAE5B,OACQS,EAAA,cAAC5C,EAADO,OAAAsC,OAAA,GACQpC,KAAKJ,MACLI,KAAKS,MAFb,CAGIH,YAAaN,KAAKM,YAClB+B,UAAU7B,KAASkB,MAAsC,IAAxB1B,KAAKI,qBA/F9C,CAAAyB,IAAA,4BAAAtB,MAAA,SA6H0BG,GAE1BA,aAAqBC,mBACrBD,EAAU4B,uBAAuBtC,KAAKgB,4BACtChB,KAAKe,SAAS,CACVR,MAAOG,EAAUH,SAIzBG,EAAU6B,kBAAkBvC,KAAKuB,yBAtI7B,CAAAM,IAAA,8BAAAtB,MAAA,SAyI4BG,GAC5BA,aAAqBC,kBACrBD,EAAU8B,2BAA2BxC,KAAKgB,4BAG9CN,EAAU+B,sBAAsBzC,KAAKuB,2BA9IjC5B,EAAA,CAA2C+C,aAA3ClD,EAEDmD,YAFC,6BAAAtB,OAE0C9B,EAAUoD,aAAepD,EAAUqD,KAF7E,KAAAnD,+BChCPoD,EAAb,SAAAnD,GAEI,SAAAmD,EAAYjD,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,IACtChD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+C,GAAA1C,KAAAH,KAAMJ,KAUVkD,aAAe,SAACvC,GACRV,EAAKD,MAAMU,aACXT,EAAKD,MAAMU,YAAYC,GAGvBV,EAAKD,MAAMmD,YACXlD,EAAKmD,cAAczC,IAjBeV,EAqB1CmD,cAAgB,SAACzC,GACTV,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,cAvBuBf,EAqFlCoD,YAAc,SAACC,GACnB,IAEIC,EAFE3C,EAAQX,EAAKD,MAAMc,UACnBH,EAAQ2C,EAAIE,QAAQ,GAM1B,OAJI5C,IACA2C,EAAQ3C,EAAM6C,eAAoCF,MAG/ChB,EAAA,qBAAKmB,MAAO,CAACC,WAAY,WAAYJ,EAAI,GAAA9B,OAAMd,EAAN,KAAAc,OAAe8B,GAAQ5C,IA1FvEV,EAAKY,MAAQ,CACT+C,WAAY,CACRC,OAAQ,EACRC,QAAS,IANqB7D,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAA+C,EAAAnD,GAAAI,OAAA8B,EAAA,EAAA9B,CAAA+C,EAAA,EAAAhB,IAAA,SAAAtB,MAAA,WA6Ba,IAGDoD,EACAC,EACAC,EACAC,EANCC,EAAA/D,KACCO,EAAQP,KAAKJ,MAAMW,MACrByD,EAAO,EAMLxD,EAAQR,KAAKJ,MAAMc,UACzB,GAAIF,EAAO,CACPsD,EAAWtD,EAAMkB,SACjB,IAAMuC,EAASzD,EAAM6C,eACrB,QAAehD,IAAX4D,QACmB5D,IAAnB4D,EAAOC,cACY7D,IAAnB4D,EAAOE,QACX,CACIP,EAAMK,EAAOC,QACbL,EAAMI,EAAOE,QAEb,IAAMC,EAAcH,EAAOE,QAAUF,EAAOC,QAC5CP,EAAUnD,EAAM6C,eAAegB,WAAaC,WAASC,SAASC,SAC9ChE,EAAM6C,eAAegB,WAAaC,WAASC,SAASE,QAEhER,EAAOS,WACPV,EAAOC,EAAOS,WACPf,IACPK,EAAOI,EAAa,GAAKpE,KAAKS,MAAM+C,WAAWC,MAAQ,EAAIW,EAAapE,KAAKS,MAAM+C,WAAWC,MAAQ,IAKlH,OACItB,EAAA,cAACwC,EAAAC,EAAD,CACIC,SAAU,SAACC,GACPf,EAAKhD,SAAS,CAAEyC,WAAYsB,EAAYC,UAG/C,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,WAAH,OACG9C,EAAA,qBAAK+C,IAAKD,GACN9C,EAAA,cAACgD,EAAA,EAADrF,OAAAsC,OAAA,GACQ2B,EAAKnE,MADb,CAEIW,MAAOA,GAAgB,EACvBqD,IAAKA,EACLC,IAAKA,EACLuB,SAAUpB,EACVqB,eAAgB1B,EAAU,EAAI,EAC9B2B,cAAezB,EACf0B,SAAUxB,EAAKjB,aACf0C,UAAWzB,EAAKf,cAChByC,cAAe1B,EAAKd,YACpBZ,UAAuB,IAAbyB,YA/ElCjB,EAAA,CAAsCH,gBAmGPrD,IAAmBwD,4BCzGrC6C,EAAb,SAAAhG,GAEI,SAAAgG,EAAY9F,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0F,IACtC7F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4F,GAAAvF,KAAAH,KAAMJ,KAMVkD,aAAe,SAACvC,EAAeoF,GACvB9F,EAAKD,MAAMU,aACXT,EAAKD,MAAMU,YAAYC,GAGvBV,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,cAVff,EAAKY,MAAQ,GAHyBZ,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAA4F,EAAAhG,GAAAI,OAAA8B,EAAA,EAAA9B,CAAA4F,EAAA,EAAA7D,IAAA,SAAAtB,MAAA,WAoBQ,IAEIoD,EACAC,EACAC,EACAC,EALEvD,EAAQP,KAAKJ,MAAMW,MACrByD,EAAO,EAMLxD,EAAQR,KAAKJ,MAAMc,UACzB,GAAIF,EAAO,CACPsD,EAAWtD,EAAMkB,SACjBiC,EAAUnD,EAAM6C,eAAegB,WAAaC,WAASC,SAASC,SACtDhE,EAAM6C,eAAegB,WAAaC,WAASC,SAASE,QAE5D,IAAMR,EAASzD,EAAM6C,eAErB,QAAehD,IAAX4D,QACmB5D,IAAnB4D,EAAOC,cACY7D,IAAnB4D,EAAOE,QACX,CACIP,EAAMK,EAAOC,QACbL,EAAMI,EAAOE,QAEOF,EAAOE,QAAUF,EAAOC,QAExCD,EAAOS,aACPV,EAAOC,EAAOS,aAO1B,OACIvC,EAAA,cAACyD,EAAA,EAAD9F,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOA,GAAgB,EACvBqD,IAAKA,EACLC,IAAKA,EACLuB,SAAUpB,EACV6B,cAAelC,EAAU,GAAM,EAC/BmC,cAAe9F,KAAK8C,aACpBT,UAAuB,IAAbyB,EACViC,kBAAkB,EAClBC,eAAgBC,IAASC,MACzBC,YAAa,WAhE7BT,EAAA,CAA4ChD,gBAsEPrD,IAAmBqG,WC/E3CU,EAA0C,CACnD7C,WAAY,SACZ8C,MAAOC,IAAOC,MACdC,SAAU,IAGDC,EAAgB,+GCGhBC,EAAb,SAAAhH,GAEI,SAAAgH,EAAY9G,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0G,IACtC7G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4G,GAAAvG,KAAAH,KAAMJ,KAMVkD,aAAe,SAAC6D,GAER9G,EAAKD,MAAMU,aACXT,EAAKD,MAAMU,YAAaqG,EAAMC,OAA4BrG,QAVxBV,EAc1CgH,aAAe,SAACF,GAERA,GAASA,EAAMG,gBACfH,EAAMG,iBAGNjH,EAAKD,MAAMc,qBAAqBC,mBAC5Bd,EAAKD,MAAMc,UAAUqG,eAAelH,EAAKD,MAAMW,OAC3CV,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,aAGfO,QAAQe,MAAM,kCAvBtBrC,EAAKY,MAAQ,GAHyBZ,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAA4G,EAAAhH,GAAAI,OAAA8B,EAAA,EAAA9B,CAAA4G,EAAA,EAAA7E,IAAA,SAAAtB,MAAA,WAkCQ,IACIuD,EADEvD,EAAQP,KAAKJ,MAAMW,MAGnBC,EAAQR,KAAKJ,MAAMc,UAKzB,OAJIF,IACAsD,EAAWtD,EAAMkB,UAIjBS,EAAA,sBAAM6E,SAAUhH,KAAK6G,cACjB1E,EAAA,cAAC8E,EAAA,EAADnH,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOA,EACPgF,SAAUvF,KAAK8C,aACfT,UAAuB,IAAbyB,UAhD9B4C,EAAA,CAAyChE,gBAwDPrD,IAAmBqH,WCzDxCQ,EAAb,SAAAxH,GAEI,SAAAwH,EAAYtH,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkH,IACtCrH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoH,GAAA/G,KAAAH,KAAMJ,KAMVkD,aAAe,SAAC6D,GAER9G,EAAKD,MAAMU,aACXT,EAAKD,MAAMU,YAAaqG,EAAMC,OAA4BO,SAG1DtH,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,cAXff,EAAKY,MAAQ,GAHyBZ,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAAoH,EAAAxH,GAAAI,OAAA8B,EAAA,EAAA9B,CAAAoH,EAAA,EAAArF,IAAA,SAAAtB,MAAA,WAqBQ,IACIuD,EADEvD,EAAQP,KAAKJ,MAAMW,MAInBC,EAAQR,KAAKJ,MAAMc,UAKzB,OAJIF,IACAsD,EAAWtD,EAAMkB,UAIjBS,EAAA,cAACiF,EAAA,EAADtH,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIuH,QAAS5G,IAAgB,EACzBgF,SAAUvF,KAAK8C,aACfT,UAAuB,IAAbyB,EACVuD,eAAgBpB,IAASqB,KACzBC,OAAO,SArCvBL,EAAA,CAAwCxE,aCC3B8E,GD0CoBnI,IAAmB6H,GC1CpD,SAAAxH,GAEI,SAAA8H,EAAY5H,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwH,IACtC3H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0H,GAAArH,KAAAH,KAAMJ,KAMVkD,aAAe,SAAC6D,GAER9G,EAAKD,MAAMU,aACXT,EAAKD,MAAMU,YAAaqG,EAAMC,OAA4BrG,OAG1DV,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,cAduBf,EAkB1CgH,aAAe,SAACF,GAERA,GAASA,EAAMG,gBACfH,EAAMG,iBAGNjH,EAAKD,MAAMc,qBAAqBC,mBAC5Bd,EAAKD,MAAMc,UAAUqG,eAAelH,EAAKD,MAAMW,OAC3CV,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,aAGfO,QAAQe,MAAM,kCA3BtBrC,EAAKY,MAAQ,GAHyBZ,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAA0H,EAAA9H,GAAAI,OAAA8B,EAAA,EAAA9B,CAAA0H,EAAA,EAAA3F,IAAA,SAAAtB,MAAA,WAsCQ,IACIuD,EADEvD,EAAQP,KAAKJ,MAAMW,MAGnBC,EAAQR,KAAKJ,MAAMc,UAKzB,OAJIF,IACAsD,EAAWtD,EAAMkB,UAIjBS,EAAA,cAAC8E,EAAA,EAADnH,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOA,EACPkH,KAAK,QACLlC,SAAUvF,KAAK8C,aACfT,UAAuB,IAAbyB,SApD1B0D,EAAA,CAA0C9E,iBA2DPrD,IAAmBmI,WC3DzCE,EAAb,SAAAhI,GAEI,SAAAgI,EAAY9H,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0H,IACtC7H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4H,GAAAvH,KAAAH,KAAMJ,KAGVkD,aAAe,SAAC6D,GAER9G,EAAKD,MAAMU,aACXT,EAAKD,MAAMU,YAAaqG,EAAMC,OAA4BrG,OAG1DV,EAAKD,MAAMgB,YACXf,EAAKD,MAAMgB,cAXuBf,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAA4H,EAAAhI,GAAAI,OAAA8B,EAAA,EAAA9B,CAAA4H,EAAA,EAAA7F,IAAA,SAAAtB,MAAA,WAkBQ,IACIuD,EACA6D,EAFEpH,EAAQP,KAAKJ,MAAMW,MAKnBC,EAAQR,KAAKJ,MAAMc,UAYzB,OAXIF,IACAsD,EAAWtD,EAAMkB,UAGjBlB,aAAiBoH,kBACjBD,EAAUnH,EAAMqH,eAAeF,SAGnCxG,QAAQC,IAAI,YAAcb,GAC1BY,QAAQC,IAAI,WAAauG,GAGrBxF,EAAA,cAAC2F,EAAA,EAADhI,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEI2F,SAAUvF,KAAK8C,aACfT,UAAuB,IAAbyB,EACViE,UAAU,SAET/H,KAAKgI,cAAczH,EAAOoH,MA1C3C,CAAA9F,IAAA,gBAAAtB,MAAA,SA+C0B0H,EAAaN,GAC/B,GAAIA,EACA,OAAOA,EAAQO,IAAK,SAAAC,GAAO,OAAOhG,EAAA,uBAAArC,OAAAsC,OAAA,GAAY+F,IAAMF,EAAM,WAAY,KAApC,CAA0CpG,IAAKsG,EAAG5H,MAAO4H,IAAIA,SAjD3GT,EAAA,CAA0ChF,gBAsDPrD,IAAmBqI,2BClDzCU,EAAb,SAAA1I,GAEI,SAAA0I,EAAYxI,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoI,IACtCvI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsI,GAAAjI,KAAAH,KAAMJ,KAOVyI,YAAc,SAAC1B,GAEX,IAAMjG,EAAYb,EAAKD,MAAMc,UACzB4H,GAAe,EAEf5H,GAAaA,EAAU6H,SACvBD,IAAe5H,EAAU6H,OAAOC,mBAGhCF,EAEAzI,EAAK4I,mBAGL5I,EAAK6I,cAtB6B7I,EAiElC4I,iBAAmB,kBAAM5I,EAAKkB,SAAS,CAAE4H,QAAQ,KAjEf9I,EAkElC+I,oBAAsB,WAC1B/I,EAAKkB,SAAS,CAAE4H,QAAQ,IACxB9I,EAAK6I,cApEiC7I,EAsElCgJ,mBAAqB,kBAAMhJ,EAAKkB,SAAS,CAAE4H,QAAQ,KAnEvD9I,EAAKY,MAAQ,CACTkI,QAAQ,GAJ0B9I,EAF9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAAsI,EAAA1I,GAAAI,OAAA8B,EAAA,EAAA9B,CAAAsI,EAAA,EAAAvG,IAAA,SAAAtB,MAAA,WA8BQ,IAAMuI,EAAK9I,KAAKJ,MAAMmJ,cAClBvH,EAAQxB,KAAKJ,MAAM4B,MAMvB,OAJIxB,KAAKJ,MAAMc,YACXc,EAAQxB,KAAKJ,MAAMc,UAAUc,OAI7BW,EAAA,6BACIA,EAAA,cAAC6G,EAAA,EAADlJ,OAAAsC,OAAA,CAAQkB,MAAO,CAACC,WAAY,WACpBvD,KAAKJ,MADb,CAEIqJ,KAAMH,EAAK,GAAKtH,EAChB0H,QAASlJ,KAAKqI,eAGlBlG,EAAA,cAACgH,EAAA,EAAD,CACIpB,UAAS,YAAA1G,OAAcrB,KAAKJ,MAAMmI,WAClCqB,oBAAoB,EACpBC,iBAAiB,SACjBC,kBAAkB,OAClBC,KAAK,eACLC,OAAQC,IAAOC,OACff,OAAQ3I,KAAKS,MAAMkI,OACnBgB,SAAU3J,KAAK6I,mBACfe,UAAW5J,KAAK4I,qBAEhBzG,EAAA,uBACKnC,KAAKJ,MAAMiK,iBAAmB7J,KAAKJ,MAAMiK,iBAAzC,QAAAxI,OAAoEG,EAApE,KACDW,EAAA,yBACEnC,KAAKJ,MAAMc,WAAaV,KAAKJ,MAAMc,UAAUe,YAA9C,IAAAJ,OAAiErB,KAAKJ,MAAMc,UAAUe,YAAtF,KAAuG,QA3DhI,CAAAI,IAAA,aAAAtB,MAAA,WA2EYP,KAAKJ,MAAMU,aACXN,KAAKJ,MAAMU,YAAY,UA5EnC8H,EAAA,CAAsC1F,gBAiFPrD,IAAmB+I,qCCpFrC0B,EAAb,SAAApK,GAII,SAAAoK,EAAYlK,GAA8B,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8J,IACtCjK,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgK,GAAA3J,KAAAH,KAAMJ,KAgCFmK,kBAAoB,WACxBlK,EAAKkB,SAAS,CACV4H,QAAS9I,EAAKY,MAAMkI,UAhCxB9I,EAAKY,MAAQ,CACTkI,QAAQ,GAJ0B9I,EAJ9C,OAAAC,OAAA6B,EAAA,EAAA7B,CAAAgK,EAAApK,GAAAI,OAAA8B,EAAA,EAAA9B,CAAAgK,EAAA,EAAAjI,IAAA,SAAAtB,MAAA,WAcQ,IAAIiB,EAAQ,WACNhB,EAAQR,KAAKJ,MAAMc,UAKzB,OAJIF,QAAyBH,IAAhBG,EAAMgB,QACfA,EAAQhB,EAAMgB,OAIdW,EAAA,qBAAKmB,MAAOtD,KAAKJ,MAAM0D,OACnBnB,EAAA,cAAC6H,EAAA,EAAD,CAAcC,UAAU,GACpB9H,EAAA,cAACoH,EAAA,EAAD,CACIA,KAAMvJ,KAAKS,MAAMkI,OAAS,SAAW,MACrCO,QAASlJ,KAAK+J,oBAElB5H,EAAA,qBAAKmB,MAAO,CAAC4G,WAAY,MACzB/H,EAAA,cAACgI,EAAA,EAAD,KAAO3I,IAEXW,EAAA,cAACiI,EAAA,EAAD,CAAUzB,OAAQ3I,KAAKS,MAAMkI,QACxB3I,KAAKJ,MAAMyK,eA/BhCP,EAAA,CAA6CpH,aAAhCoH,EAEOQ,wBAA0BhE,IAAOC,MA0CflH,EAAiB,CAACe,gBAAgB,GAAlCf,CAAyCyK,GAAxE,ICxBcS,cAEjB,SAAAA,EAAY3K,GAAc,IAAAC,EAGlBU,EAHkB,OAAAT,OAAAC,EAAA,EAAAD,CAAAE,KAAAuK,IACtB1K,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyK,GAAApK,KAAAH,KAAMJ,KA6CV4K,SAAW,WACP,OAAO,GA/Ce3K,EA8D1B4K,kBAAoB,SAAClK,GAGbV,EAAKD,MAAMc,qBAAqBC,mBAChCd,EAAKD,MAAMc,UAAUH,MAAQA,GAGjCV,EAAKkB,SAAS,CAAER,MAAOA,KArEDV,EAwE1B6K,kBAAoB,SAAC/D,GAEjBxF,QAAQC,IAAI,UACRuF,GAASA,EAAMG,gBACfH,EAAMG,iBAENjH,EAAKD,MAAMc,qBAAqBC,mBAC5Bd,EAAKD,MAAMc,UAAUqG,eAAelH,EAAKY,MAAMF,OAE/CV,EAAKD,MAAMgB,cAGXO,QAAQe,MAAM,gCACdrC,EAAKkB,SAAS,CAAER,MAAOV,EAAKD,MAAMc,UAAUH,WArF9BV,EA0F1BkK,kBAAoB,WAChBlK,EAAKD,MAAMc,UAAUiK,WACrB9K,EAAKD,MAAMgB,cAxFPf,EAAKD,MAAMc,qBAAqBC,kBACF,MAA9Bd,EAAKD,MAAMc,UAAUH,QAErBA,EAAQV,EAAKD,MAAMc,UAAUH,OAGjCV,EAAKY,MAAQ,CACTmK,SAAS,EACTpJ,MAAO3B,EAAKD,MAAMc,UAAUc,MAC5BC,YAAa5B,EAAKD,MAAMc,UAAUe,YAClClB,MAAOA,EACPiD,WAAY,CACRC,OAAQ,EACRC,QAAS,IAjBK7D,mFAsBN,IAAAkE,EAAA/D,KAGVQ,EAAQR,KAAKJ,MAAMc,UAErBF,aAAiBG,kBAEjBH,EAAM8B,uBAAuB,SAACuI,GACtBA,aAAalK,kBACboD,EAAKhD,SAAS,CACVR,MAAOsK,EAAEtK,UAMzBC,EAAM+B,kBAAkB,SAACsI,GACrB9G,EAAKhD,SAAS,CACVS,MAAOqJ,EAAErJ,MACTC,YAAaoJ,EAAEpJ,0DASTjB,GACd,OAAO2B,EAAA,cAACoI,EAAD,CAAiB1I,IAAKrB,EAAMsK,GACXpK,UAAWF,EACXI,WAAYZ,KAAKJ,MAAMgB,oDAGpCF,GAAsB,IAAAqK,EAAA/K,KACjC,GAAIU,aAAqBsK,iBACrB,OAAOtK,EAAU2J,SAASnC,IAAK,SAAC2C,GAAQ,OAAOE,EAAKE,kBAAkBJ,yCAqClEnK,GAQR,GANeA,EAAU6H,kBAEH2C,gBAClB/J,QAAQC,IAAI,iBAGZV,aAAqBC,iBAAgB,CAErC,GAAID,aAAqByK,kBAAiB,CAEtC,IAAMlH,EAASvD,EAAU2C,eACzB,YAAehD,IAAX4D,QACmB5D,IAAnB4D,EAAOC,cACY7D,IAAnB4D,EAAOE,QAGHhC,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,cAACiJ,EAADtL,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,kBAClB1H,YAAY,MAQpBZ,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,cAACkJ,EAADvL,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,sBAMjC,GAAI/J,aAAqB4K,sBAC1B,OACInJ,EAAA,mCAGH,GAAIzB,aAAqB6K,mBAC1B,OACIpJ,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,yBACAA,EAAA,cAACqJ,EAAD1L,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,sBAK7B,GAAI/J,aAAqB+K,iBACrB/K,aAAqBgL,eAE1B,OACIvJ,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,yBACAA,EAAA,cAACwJ,EAAD7L,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,sBAK7B,GAAI/J,aAAqBkH,gBAC1B,OACIzF,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,yBACAA,EAAA,cAACyJ,EAAD9L,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,sBAK7B,GAAI/J,aAAqBmL,iBAAgB,CAE1C,IAAMC,EAAO,IAAIC,KAAK,CAACrL,EAAUH,QAC3ByL,EAAMC,OAAOC,IAAIC,gBAAgBL,GAEvC,OACI3J,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,yBACAA,EAAA,qBAAKiK,IAAKJ,EAAKK,IAAI,QAAQ3I,OAAQ,OAK3C,OACIvB,EAAA,yBACIA,EAAA,qBAAKmB,MAAO8C,GAAsB1F,EAAUc,OAC5CW,EAAA,yBACAA,EAAA,cAACmK,EAADxM,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,sBAM/B,OAAI/J,aAAqBsK,iBAExB7I,EAAA,cAACoK,EAADzM,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAKyK,oBAEjBzK,KAAKwM,eAAe9L,IAGtBA,aAAqBG,gBAGxBsB,EAAA,cAACsK,EAAD3M,OAAAsC,OAAA,GACQpC,KAAKJ,MADb,CAEIW,MAAOP,KAAKS,MAAMF,MAClBD,YAAaN,KAAK+J,0BANvB,mCAgBP,IAAMrJ,EAAYV,KAAKJ,MAAMc,UAE7B,OAAKA,EAUDyB,EAAA,qBAAKmB,MAAO,CACRoJ,UAAW,GACXC,aAAc,IAEdxK,EAAA,cAACyK,EAAA,EAAD,CAAMC,aAAa,GACd7M,KAAK8M,YAAYpM,MAd1BS,QAAQe,MAAM,gBAEVC,EAAA,iDApP6BO,aCdxBqK,cAMjB,SAAAA,EAAYnN,GAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+M,IACtBlN,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiN,GAAA5M,KAAAH,KAAMJ,KAHFoN,aAA4B,GAEVnN,EAY1BoN,aAAe,WACPpN,EAAKY,MAAMyM,QACXrN,EAAKY,MAAMyM,OAAOC,UAdAtN,EA4B1BuN,QAAU,SAACjF,GACPtI,EAAKkB,SAAS,CACVsM,KAAMlF,EAAEmF,cAAc/M,OAAS,eA9BbV,EAkC1B0N,QAAU,SAACpF,GACPtI,EAAKkB,SAAS,CACVyM,KAAMC,SAAStF,EAAEmF,cAAc/M,MAAO,OApCpBV,EAiHlB6N,mBAAqB,WACzB7N,EAAK8N,aAlHiB9N,EAkIlB+N,aAAe,WACnBzM,QAAQC,IAAI,iBAEZ,IAAM8L,EAASrN,EAAKY,MAAMyM,OAEtBA,IAGAA,EAAOW,eAAYxN,EACnB6M,EAAOY,kBAAezN,EACtB6M,EAAOa,aAAU1N,EACjB6M,EAAOc,oBAAiB3N,EACxB6M,EAAOe,sBAAmB5N,EAG1B6M,EAAOgB,WAGXrO,EAAKsO,WApJiBtO,EAuJlB8N,UAAY,WAChBS,SAAOC,SAAU,EACjB,IAAMnB,EAAS,IAAIkB,SAAO,IAAIE,8BAFRC,EAAAzO,OAAA0O,EAAA,EAAA1O,QAAA0O,EAAA,EAAA1O,CAAAD,IAIdgO,EAJcU,EAIdV,UAAWC,EAJGS,EAIHT,aAAcE,EAJXO,EAIWP,eAAgBC,EAJ3BM,EAI2BN,iBAAkBF,EAJ7CQ,EAI6CR,QACnEjO,OAAOsC,OAAO8K,EAAQ,CAAEW,YAAWC,eAAcE,iBAAgBC,mBAAkBF,YAEnF,IAAMV,EAAOxN,EAAKY,MAAM4M,KAClBG,EAAO3N,EAAKY,MAAM+M,KACxBN,EAAOuB,QAAQpB,EAAMG,GACrB3N,EAAKkB,SAAS,CACVmM,SAAQhL,WAAO7B,KAlKGR,EAsKlBgO,UAAY,WAChBhO,EAAKkB,SAAS,CACV2N,aAAa,IAEjBvN,QAAQC,IAAI,gCA1KUvB,EA6KlBiO,aAAe,SAACnH,GACpBxF,QAAQC,IAAI,iCAAmCuN,KAAKC,UAAUjI,IAC9D9G,EAAKkB,SAAS,CACVmB,MAAO,gBAAkByM,KAAKC,UAAUjI,KAE5C9G,EAAKsO,WAlLiBtO,EAqLlBkO,QAAU,WACd5M,QAAQC,IAAI,oBACZvB,EAAKkB,SAAS,CACVmB,MAAO,qBAEXrC,EAAKsO,WA1LiBtO,EAgMlBmO,eAAiB,SAACtN,GAEtB,IAAKA,EAAUmO,OAAQ,CACnB,IAAMC,EAASjP,EAAKmN,aAAa+B,QACjCD,EAAOE,KAAKtO,GACZb,EAAKmN,aAAe8B,OAIFzO,IAAlBR,EAAKoP,WACLhD,OAAOiD,aAAarP,EAAKoP,UACzBpP,EAAKoP,cAAW5O,GAGpBR,EAAKoP,SAAWhD,OAAOkD,WAAW,WAC9BtP,EAAKkB,SAAS,CACVqO,WAAYvP,EAAKmN,gBAEtB,MAlNmBnN,EAqNlBoO,iBAAmB,SAACvN,GAExB,IAAM2O,EAAQxP,EAAKmN,aAAasC,QAAQ5O,EAAW,GACnD,GAAI2O,GAAS,EAAG,CACZ,IAAMP,EAASjP,EAAKmN,aAAauC,OAAOF,EAAO,GAC/CxP,EAAKmN,aAAe8B,OAGAzO,IAApBR,EAAK2P,cACLvD,OAAOiD,aAAarP,EAAK2P,aACzB3P,EAAK2P,iBAAcnP,GAGvBR,EAAK2P,YAAcvD,OAAOkD,WAAW,WACjCtP,EAAKkB,SAAS,CACVqO,WAAYvP,EAAKmN,gBAEtB,MAlOHnN,EAAKY,MAAQ,CACTiO,aAAa,EACbrB,KAAMpB,OAAOwD,SAASC,UAAY,YAClClC,KAAM,IACN4B,WAAY,IARMvP,qFAkBJa,GAClB,OAAOyB,EAAA,cAACwN,EAAD,CAAiB9N,IAAKnB,EAAUoK,GACfpK,UAAWA,EACXE,WAAYZ,KAAKiN,qDAG/BvM,GAAwB,IAAAqD,EAAA/D,KAClC,OAAOU,EAAUwH,IAAK,SAAC1H,GAAY,OAAOuD,EAAK6L,sBAAsBpP,sCAiBrE,IAAM6M,EAAOrN,KAAKS,MAAM4M,KAClBG,EAAOxN,KAAKS,MAAM+M,KAExB,OAAOrL,EAAA,6BAEFnC,KAAK6P,cAAc7P,KAAKS,MAAM2O,YAE/BjN,EAAA,cAACgH,EAAA,EAAD,CACIpB,UAAW,WACXuB,kBAAkB,UAClBC,KAAK,UACLC,OAAQC,IAAOqG,KACfnH,QAAmC,IAA3B3I,KAAKS,MAAMiO,YACnB9E,UAAW5J,KAAK0N,oBAEhBvL,EAAA,cAACgI,EAAA,EAAD,KAAMhI,EAAA,kEACNA,EAAA,yBACAA,EAAA,yBACAA,EAAA,cAAC6H,EAAA,EAAD,CAAc1G,MAAO,CAACyM,WAAY,WAC9B5N,EAAA,cAACgI,EAAA,EAAD,kBACAhI,EAAA,cAAC8E,EAAA,EAAD,CACI1G,MAAO8M,EACP5F,KAAK,OACLlC,SAAUvF,KAAKoN,WAGvBjL,EAAA,yBACAA,EAAA,cAAC6H,EAAA,EAAD,CAAc1G,MAAO,CAACyM,WAAY,WAC9B5N,EAAA,cAACgI,EAAA,EAAD,kBACAhI,EAAA,cAAC8E,EAAA,EAAD,CACI1G,MAAOiN,EAAKpK,QAAQ,GACpBQ,IAAK,KACLC,IAAK,MACL4D,KAAK,SACLlC,SAAUvF,KAAKuN,WAGvBpL,EAAA,yBACAA,EAAA,yBACKnC,KAAKS,MAAMyB,MAAQlC,KAAKS,MAAMyB,WAAQ7B,EACtCL,KAAKgQ,2DASlB,IAAMC,IAAQC,SAAST,UAAWS,SAAST,SAASU,WAAWC,WAAW,SACpEC,GAAuD,GAA3CC,UAAUC,UAAUjB,QAAQ,WAE9C,OAAIW,GAASI,EAELlO,EAAA,yBACIA,EAAA,yBACCsE,EACDtE,EAAA,yBAAKA,EAAA,yBRlHY,qGQsHlB8N,EAEH9N,EAAA,yBACIA,EAAA,yBACCsE,QAJN,oCAgBPzG,KAAKwQ,aAELxQ,KAAKgN,aAAe,GAEpBhN,KAAKe,SAAS,CACV2N,aAAa,EACbxB,YAAQ7M,EACR+O,WAAYpP,KAAKgN,yDA6GC3M,IAAlBL,KAAKiP,WACLhD,OAAOiD,aAAalP,KAAKiP,UACzBjP,KAAKiP,cAAW5O,QAGIA,IAApBL,KAAKwP,cACLvD,OAAOiD,aAAalP,KAAKwP,aACzBxP,KAAKwP,iBAAcnP,UAxPeqC,aCdxCzB,mLAMF,OACEwP,EAAA7L,EAAA8L,cAAA,WAAS3I,UAAW,YAE1B0I,EAAA7L,EAAA8L,cAAA,OAAK3I,UAAU,MAAMzE,MAAO,CAClBqN,OAAQ,SAEVF,EAAA7L,EAAA8L,cAACE,EAAD,eAZUrR,aAAZ0B,EAEGC,aAAc,EAkBRD,QCZK4P,QACW,cAA7B5E,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASoB,MACvB,2DCTNC,IAASC,OAAOP,EAAA7L,EAAA8L,cAACO,EAAD,MAASf,SAASgB,eAAe,SDgI3C,kBAAmBZ,WACrBA,UAAUa,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c1f7c4af.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Parameter, ValueParameter } from 'rabbitcontrol';\nimport {BangParameter} from 'rabbitcontrol';\nimport App from './App';\n\ninterface ExternalProps {\n    label: string;\n    userid: string;\n    registerElement: (element:RegisterCB) => void;\n    unregisterElement: (element:RegisterCB) => void;\n    onSubmitCb: () => void;\n}\n\nexport interface InjectedProps {\n    value: any;\n    parameter?: Parameter;\n    disabled?: boolean;    \n    handleValue?: (value: any) => void;\n    onSubmitCb?: () => void;\n}\n\ntype State = {\n    parameter?: Parameter;\n    label?: string;\n    description?: string;\n    value: any;\n    readonly?: boolean;\n};\n\n\nexport interface RegisterCB {\n    setParameter(parameter: Parameter): void;\n    removeParameter(parameter: Parameter): void;\n    getUserid(): string;\n}\n\n\ninterface Config {\n    ignoreReadonly?: boolean;\n};\n\nexport const parameterWrapped = (config?: Config) =>\n    <TOriginalProps extends {}>(\n        Component: (React.ComponentClass<TOriginalProps & InjectedProps>\n                  | React.StatelessComponent<TOriginalProps & InjectedProps>)\n    ) => {\n\n        type ResultProps = TOriginalProps & ExternalProps;\n\n        const result = class ParameterComponentWrapper extends React.Component<ResultProps, State> implements RegisterCB {\n            \n            static displayName = `ParameterComponentWrapper(${Component.displayName || Component.name})`;\n            private ignoreReadonly = config ? config.ignoreReadonly : undefined;\n\n            constructor(props: ResultProps) {\n                super(props);\n                this.state = {\n                    label: this.props.label,\n                    value: null,\n                    parameter: undefined,            \n                };\n            }\n\n            // override\n            componentDidMount() {\n                this.props.registerElement(this);\n            }\n\n            // override\n            componentWillUnmount() {\n                const param = this.state.parameter;\n                if (param) {\n                    this.unregisterParameterHandlers(param);\n                }\n        \n                this.props.unregisterElement(this);\n            }\n\n            /**\n             * RegisterCB interface\n             * \n             * @param parameter \n             */\n            setParameter(parameter: Parameter): void {\n\n                if (parameter.userid !== this.props.userid) {\n                    console.error(`userid mismatch! parameter: ${parameter.userid} - widget: ${this.props.userid}`);\n                    return;\n                }\n\n                if (App.VERBOSE_LOG) {\n                    console.log(`set parameter for widget (${this.props.userid})`);\n                }\n\n                this.registerParameterHandlers(parameter);\n                this.setState({\n                    parameter: parameter,\n                    label: parameter.label,\n                    readonly: parameter.readonly,\n                });\n            }\n\n            removeParameter(param: Parameter): void {\n                this.unregisterParameterHandlers(param);\n                this.setState({\n                    parameter: undefined,\n                });\n            }\n\n            getUserid(): string {\n                return this.props.userid;\n            }\n\n            /**\n             * handle value\n             */\n            handleValue = (value: any) => {\n                const param = this.state.parameter;\n                if (param instanceof ValueParameter) {\n                    param.value = value;\n                    this.props.onSubmitCb();\n                } else if (param instanceof BangParameter) {\n                    param.doBang();\n                    this.props.onSubmitCb();\n                }\n\n                this.setState({\n                    value: value,\n                })\n            };\n\n            // --------------------------------------------\n            // render\n            // --------------------------------------------\n            render(): JSX.Element {\n\n                const param = this.state.parameter;\n                const readonly = this.state.readonly;\n\n                return (\n                        <Component\n                            {...this.props} \n                            {...this.state} \n                            handleValue={this.handleValue}\n                            disabled={param ? (readonly ? (!(this.ignoreReadonly === true)) : false) : true}\n                        />\n                );\n            }\n\n\n            // --------------------------------------------\n            // --------------------------------------------\n            private handleParameterValueChange = (parameter: Parameter) => {\n\n                if (parameter instanceof ValueParameter) {\n\n                    if (App.VERBOSE_LOG) {\n                        console.log(`setting widget value (${parameter.userid}): ${parameter.value as string}`);                \n                    }\n\n                    this.setState({\n                        value: parameter.value\n                    });\n                }\n            }\n        \n            private handleParameterChange = (parameter: Parameter) => {\n                this.setState({\n                    label: parameter.label,\n                    description: parameter.description,\n                    readonly: parameter.readonly,\n                });\n            }\n        \n            private registerParameterHandlers(parameter: Parameter) {\n\n                if (parameter instanceof ValueParameter) {                    \n                    parameter.addValueChangeListener(this.handleParameterValueChange);                    \n                    this.setState({                        \n                        value: parameter.value,\n                    });\n                }\n        \n                parameter.addChangeListener(this.handleParameterChange); \n            }\n        \n            private unregisterParameterHandlers(parameter: Parameter) {\n                if (parameter instanceof ValueParameter) {\n                    parameter.removeValueChangedListener(this.handleParameterValueChange);\n                }\n                \n                parameter.removeChangedListener(this.handleParameterChange);\n            }\n        };\n\n        return result;\n    };\n\n","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { Slider, ISliderProps } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes } from 'rabbitcontrol';\nimport Measure from 'react-measure';\n\ninterface Props extends ISliderProps {\n    continuous?: boolean;\n};\n\ninterface State {\n    dimensions: {\n        width: -1,\n        height: -1\n    }; \n};\n\nexport class ParameterSliderC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1\n            },\n        };\n    }    \n\n    handleChange = (value: number) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(value);\n        }\n\n        if (this.props.continuous) {\n            this.handleRelease(value);\n        }\n    }\n\n    handleRelease = (value: number) => {\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as number;\n        let step = 1;\n        let isFloat:boolean;\n        let min:number;\n        let max:number;  \n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            const numdef = param.typeDefinition as NumberDefinition;\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = (numdef.maximum - numdef.minimum);                    \n                isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                                param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    step = valueRange > 0 && this.state.dimensions.width > 0 ? valueRange / this.state.dimensions.width : 1\n                }\n            }\n        }\n\n        return (        \n            <Measure\n                onResize={(contentRect) => {\n                    this.setState({ dimensions: contentRect.entry })\n                }}\n            >\n            {({ measureRef }) =>\n                <div ref={measureRef}>\n                    <Slider\n                        {...this.props}\n                        value={value ? value : 0}\n                        min={min}\n                        max={max}\n                        stepSize={step}\n                        labelPrecision={isFloat ? 2 : 0}\n                        labelStepSize={max}\n                        onChange={this.handleChange}\n                        onRelease={this.handleRelease}\n                        labelRenderer={this.renderLabel}\n                        disabled={readOnly === true}\n                    />      \n                </div>\n            }\n            </Measure>      \n        );\n    }\n\n    private renderLabel = (val: number) => {\n        const param = this.props.parameter\n        const value = val.toFixed(2);\n        let unit;\n        if (param) {\n            unit = (param.typeDefinition as NumberDefinition).unit\n        }\n\n        return <div style={{whiteSpace: \"nowrap\"}}>{unit ? `${value} ${unit}`: value}</div>\n    }\n};\n\nexport const ParameterSlider = parameterWrapped()(ParameterSliderC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { NumericInput, INumericInputProps, Position } from '@blueprintjs/core';\nimport { NumberDefinition, RcpTypes } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterNumericInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (value: number, valueAsString: string) => {\n        if (this.props.handleValue) {\n            this.props.handleValue(value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as number;\n        let step = 1;\n        let isFloat:boolean|undefined;\n        let min:number|undefined;\n        let max:number|undefined;  \n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n            isFloat = param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT32 ||\n                    param.typeDefinition.datatype === RcpTypes.Datatype.FLOAT64;\n\n            const numdef = param.typeDefinition as NumberDefinition;\n\n            if (numdef !== undefined && \n                numdef.minimum !== undefined && \n                numdef.maximum !== undefined)\n            {\n                min = numdef.minimum;\n                max = numdef.maximum;\n\n                const valueRange = (numdef.maximum - numdef.minimum);\n                \n                if (numdef.multipleof) {\n                    step = numdef.multipleof;\n                } else if (isFloat) {\n                    // step = valueRange > 0 && this.state.dimensions.width > 0 ? valueRange / this.state.dimensions.width : 1\n                }\n            }\n        }\n\n        return (        \n            <NumericInput\n                {...this.props}\n                value={value ? value : 0}\n                min={min}\n                max={max}\n                stepSize={step}\n                minorStepSize={isFloat ? 0.1 : 1}\n                onValueChange={this.handleChange}\n                disabled={readOnly === true}\n                selectAllOnFocus={true}\n                buttonPosition={Position.RIGHT}\n                placeholder={\"-\"}\n            />      \n        );\n    }\n};\n\nexport const ParameterNumericInput = parameterWrapped()(ParameterNumericInputC);","import { Colors } from \"@blueprintjs/core\";\n\nexport const parameterLabelStyle:React.CSSProperties = {\n    whiteSpace: \"nowrap\", \n    color: Colors.GRAY1,\n    fontSize: 16,\n};\n\nexport const SSL_INFO_TEXT = \"Connecting to unsecure websocket from secure context. You may need to adjust your browser settings.\";\nexport const SSL_INFO_TEXT_FIREFOX = \"To allow this please set: 'network.websocket.allowInsecureFromHTTPS' in 'about:config' to 'true'.\";","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { InputGroup } from '@blueprintjs/core';\nimport { ValueParameter } from 'rabbitcontrol';\n\ninterface Props {\n};\n\ninterface State {\n};\n\nexport class ParameterTextInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n    }\n    \n    handleSubmit = (event: any) => {\n        \n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.props.value)) {\n                if (this.props.onSubmitCb) {\n                    this.props.onSubmitCb();\n                }\n            } else {\n                console.error(\"could not set stringvalue...\");\n            }\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;\n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;            \n        }\n\n        return (     \n            <form onSubmit={this.handleSubmit}>\n                <InputGroup\n                    {...this.props}\n                    value={value}\n                    onChange={this.handleChange}\n                    disabled={readOnly === true}\n                />  \n            </form>    \n        );\n    }\n    \n};\n\nexport const ParameterTextInput = parameterWrapped()(ParameterTextInputC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, Position, Checkbox } from '@blueprintjs/core';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterCheckboxC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).checked);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as boolean;    \n        let readOnly:boolean|undefined;\n\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;        \n        }\n\n        return (\n            <Checkbox\n                {...this.props}\n                checked={value ? value : false}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                alignIndicator={Position.LEFT}\n                large={true}\n            />      \n        );\n    }\n};\n\nexport const ParameterCheckbox = parameterWrapped()(ParameterCheckboxC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, InputGroup } from '@blueprintjs/core';\nimport { ValueParameter } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterColorInputC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {        \n        };\n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n    \n    handleSubmit = (event: any) => {\n        \n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }\n\n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.props.value)) {\n                if (this.props.onSubmitCb) {\n                    this.props.onSubmitCb();\n                }\n            } else {\n                console.error(\"could not set stringvalue...\");\n            }\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;\n        let readOnly:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;            \n        }\n\n        return (     \n            <InputGroup\n                {...this.props}\n                value={value}\n                type=\"color\"\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n            />     \n        );\n    }\n    \n};\n\nexport const ParameterColorInput = parameterWrapped()(ParameterColorInputC);","import * as React from 'react';\nimport { parameterWrapped, InjectedProps } from './ElementWrapper';\nimport { INumericInputProps, Position, Checkbox, HTMLSelect } from '@blueprintjs/core';\nimport { EnumParameter } from 'rabbitcontrol';\n\ninterface Props extends INumericInputProps {\n};\n\ninterface State {\n};\n\nexport class ParameterHTMLSelectC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);    \n    }    \n\n    handleChange = (event: React.FormEvent<HTMLElement>) => {\n\n        if (this.props.handleValue) {\n            this.props.handleValue((event.target as HTMLInputElement).value);\n        }\n\n        if (this.props.onSubmitCb) {\n            this.props.onSubmitCb();\n        }\n    }\n\n    render() {\n        const value = this.props.value as string;    \n        let readOnly:boolean|undefined;\n        let entries:string[]|undefined;\n        let multiSelect:boolean|undefined;\n\n        const param = this.props.parameter;\n        if (param) {\n            readOnly = param.readonly;\n        }\n\n        if (param instanceof EnumParameter) {\n            entries = param.enumDefinition.entries;\n        }\n\n        console.log(\"selected:\" + value);\n        console.log(\"entries:\" + entries);\n\n        return (\n            <HTMLSelect\n                {...this.props}\n                onChange={this.handleChange}\n                disabled={readOnly === true}\n                className=\"test\"\n            >\n                {this.renderOptions(value, entries)}            \n            </HTMLSelect>      \n        );\n    }\n\n    private renderOptions(sel: string, entries?: string[]) {\n        if (entries) {\n            return entries.map( e => { return <option {...e === sel ? \"selected\": null} key={e} value={e}>{e}</option>});\n        }\n    }\n};\n\nexport const ParameterHTMLSelect = parameterWrapped()(ParameterHTMLSelectC);","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Button, Intent, IconName, Alert, IButtonProps } from '@blueprintjs/core';\n\ninterface Props extends IButtonProps {\n    className?: string;\n    label?: string;\n    labelDisabled?: boolean;\n    confirmationText?: string;\n};\n\ntype State = {\n    isOpen: boolean;\n};\n\nexport class ParameterButtonC extends React.Component<Props & InjectedProps, State> {\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            isOpen: false,\n        };\n    }\n    \n    handleClick = (event: React.MouseEvent<HTMLElement>) => {\n\n        const parameter = this.props.parameter;\n        let confirmation = false;\n\n        if (parameter && parameter.widget) {\n            confirmation = parameter.widget.needsConfirmation ? true : false;\n        }\n\n        if (confirmation) {\n            // open dialog\n            this.handleDialogOpen();\n        } else {\n            // directly send\n            this.doSendBang();        \n        }\n    }\n\n    render() {\n\n        const ld = this.props.labelDisabled;\n        let label = this.props.label;\n\n        if (this.props.parameter) {\n            label = this.props.parameter.label;\n        }\n\n        return (\n            <section>\n                <Button style={{whiteSpace: \"nowrap\", }}\n                    {...this.props}\n                    text={ld ? \"\" : label}\n                    onClick={this.handleClick}\n                />\n\n                <Alert\n                    className={`bp3-dark ${this.props.className}`}\n                    canEscapeKeyCancel={true}\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Send\"\n                    icon=\"warning-sign\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.isOpen}\n                    onCancel={this.handleDialogCancel}\n                    onConfirm={this.handleDialogConfirm}\n                >\n                    <p>\n                        {this.props.confirmationText ? this.props.confirmationText : `text ${label}?`}\n                        <br/>\n                        {(this.props.parameter && this.props.parameter.description) ? `(${this.props.parameter.description})` : \"\"}\n                    </p>\n                </Alert>\n            </section>\n        );\n\n    }\n\n    private handleDialogOpen = () => this.setState({ isOpen: true });\n    private handleDialogConfirm = () => {\n        this.setState({ isOpen: false });\n        this.doSendBang();\n    };\n    private handleDialogCancel = () => this.setState({ isOpen: false });\n\n    private doSendBang() {\n        if (this.props.handleValue) {\n            this.props.handleValue(null);\n        }\n    }\n};\n\nexport const ParameterButton = parameterWrapped()(ParameterButtonC);\n","import * as React from 'react';\nimport { InjectedProps, parameterWrapped } from './ElementWrapper';\nimport { Colors, Text, Collapse, ControlGroup, Button, Icon } from '@blueprintjs/core';\n\ninterface Props {\n    style?: React.CSSProperties;\n};\n\ninterface State {\n    isOpen: boolean;\n};\n\nexport class ParameterFoldableGroupC extends React.Component<Props & InjectedProps, State> {\n\n    static readonly COMPONENT_DEFAULT_COLOR = Colors.GRAY1;\n\n    constructor(props: Props & InjectedProps) {\n        super(props);\n    \n        this.state = {\n            isOpen: false,\n        };\n    } \n    \n    render() {\n\n        let label = \"no label\";\n        const param = this.props.parameter;\n        if (param && param.label !== undefined) {\n            label = param.label;\n        }\n\n        return (\n            <div style={this.props.style}>\n                <ControlGroup vertical={false}>\n                    <Icon \n                        icon={this.state.isOpen ? \"remove\" : \"add\"}\n                        onClick={this.handleButtonClick}\n                    />\n                    <div style={{marginLeft: 10}}/>\n                    <Text>{label}</Text>\n                </ControlGroup>\n                <Collapse isOpen={this.state.isOpen}>\n                    {this.props.children}                \n                </Collapse>\n            </div>\n        );\n    }\n\n    private handleButtonClick = () => {\n        this.setState({\n            isOpen: !this.state.isOpen,\n        });\n    }\n};\n\nexport const ParameterFoldableGroup = parameterWrapped({ignoreReadonly: true})(ParameterFoldableGroupC);","import * as React from 'react';\nimport {GroupParameter, SliderWidget, NumberDefinition, RcpTypes, Parameter, ValueParameter, BangParameter, Vector3F32Parameter, BooleanParameter, RGBAParameter, RGBParameter, EnumParameter, ImageParameter} from 'rabbitcontrol';\nimport {NumberParameter} from 'rabbitcontrol'\nimport { ParameterSliderC } from './ParameterSlider';\nimport { Colors, NumericInput, Card, InputGroup, Text, ControlGroup, Icon, Button } from '@blueprintjs/core';\nimport { ParameterNumericInputC } from './ParameterNumberInput';\nimport { parameterLabelStyle } from './Globals';\nimport { ParameterTextInputC } from './ParameterTextInput';\nimport { ParameterCheckbox, ParameterCheckboxC } from './ParameterCheckbox';\nimport { ParameterColorDivC } from './ParameterColorDiv';\nimport { ParameterColorInputC } from './ParameterColorInput';\nimport { ParameterHTMLSelectC } from './ParameterHTMLSelect';\nimport { ParameterButtonC } from './ParameterButton';\nimport { ParameterFoldableGroupC } from './ParameterFoldableGroup';\n\n\ninterface Props {\n    parameter: Parameter;\n    onSubmitCb: () => void;\n};\n\ninterface State {\n    enabled: boolean;\n    label?: string;\n    description?: string;\n    value: any;  \n    dimensions: {\n        width: -1,\n        height: -1\n    };  \n};\n\nexport default class ParameterWidget extends React.Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        let value;\n        if (this.props.parameter instanceof ValueParameter && \n            this.props.parameter.value != null)\n        {\n            value = this.props.parameter.value;\n        }\n\n        this.state = {\n            enabled: true,\n            label: this.props.parameter.label,\n            description: this.props.parameter.description,\n            value: value,\n            dimensions: {\n                width: -1,\n                height: -1\n            }\n        };\n    }\n\n    componentDidMount() {\n\n        // setup callbacks\n        const param = this.props.parameter;\n\n        if (param instanceof ValueParameter) {\n\n            param.addValueChangeListener((p) => {\n                if (p instanceof ValueParameter) {\n                    this.setState({\n                        value: p.value\n                    });\n                }\n            });\n        }\n\n        param.addChangeListener((p) => {\n            this.setState({\n                label: p.label,\n                description: p.description,\n            })\n        });\n    }\n\n    getWidth = () => {\n        return 1;\n    }\n\n    createChildWidget(param: Parameter): any {\n        return <ParameterWidget key={param.id}\n                                parameter={param} \n                                onSubmitCb={this.props.onSubmitCb}/>;\n    }\n\n    renderChildren(parameter: Parameter) {\n        if (parameter instanceof GroupParameter) {\n            return parameter.children.map( (p) => { return this.createChildWidget(p); });\n        }\n    }\n\n    handleValueChange = (value: any) => {\n\n        // set parameter value\n        if (this.props.parameter instanceof ValueParameter) {\n            this.props.parameter.value = value;\n        }\n\n        this.setState({ value: value });\n    }\n\n    handleValueSubmit = (event: any) => {\n        //\n        console.log(\"submit\");\n        if (event && event.preventDefault) {\n            event.preventDefault();\n        }        \n        if (this.props.parameter instanceof ValueParameter) {\n            if (this.props.parameter.setStringValue(this.state.value)) {\n                // call onsubmitcb to update client\n                this.props.onSubmitCb();\n            } else {\n                // set string value failed... \n                console.error(\"could not set stringvalue...\");                \n                this.setState({ value: this.props.parameter.value });\n            }\n        }\n    }\n\n    handleButtonClick = () => {\n        this.props.parameter.setDirty();\n        this.props.onSubmitCb();        \n    }\n\n    renderValue(parameter: Parameter) {\n\n        const widget = parameter.widget;        \n        \n        if (widget instanceof SliderWidget) {\n            console.log(\"SLIDER WIDGET\");\n        }\n\n        if (parameter instanceof ValueParameter) {\n\n            if (parameter instanceof NumberParameter) {\n\n                const numdef = parameter.typeDefinition as NumberDefinition;\n                if (numdef !== undefined && \n                    numdef.minimum !== undefined && \n                    numdef.maximum !== undefined)\n                {\n                    return ( \n                        <div>\n                            <div style={parameterLabelStyle}>{parameter.label}</div>\n                            <ParameterSliderC\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                                continuous={true}\n                            />\n                        </div>\n                    );\n                } else {\n\n                    // numberic input\n                    return (\n                        <div>\n                            <div style={parameterLabelStyle}>{parameter.label}</div>\n                            <ParameterNumericInputC\n                                {...this.props}\n                                value={this.state.value}\n                                handleValue={this.handleValueChange}\n                            />\n                        </div>\n                    );\n                }\n            } \n            else if (parameter instanceof Vector3F32Parameter) {\n                return (\n                    <div>vector</div>\n                );\n            }\n            else if (parameter instanceof BooleanParameter) {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterCheckboxC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            } \n            else if (parameter instanceof RGBAParameter ||\n                     parameter instanceof RGBParameter)\n            {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterColorInputC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            } \n            else if (parameter instanceof EnumParameter) {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterHTMLSelectC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n            }\n            else if (parameter instanceof ImageParameter) {\n                \n                const blob = new Blob([parameter.value]);\n                const url = window.URL.createObjectURL(blob);\n\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <img src={url} alt=\"IMAGE\" height={200}/>\n                    </div>\n                );\n            }\n            else {\n                return (\n                    <div>\n                        <div style={parameterLabelStyle}>{parameter.label}</div>\n                        <br/>\n                        <ParameterTextInputC\n                            {...this.props}\n                            value={this.state.value}\n                            handleValue={this.handleValueChange}\n                        />\n                    </div>\n                );\n\n            }\n        } else if (parameter instanceof GroupParameter) {\n            return (\n                <ParameterFoldableGroupC\n                    {...this.props}\n                    value={this.state.value}\n                    handleValue={this.handleValueChange}\n                >\n                    {this.renderChildren(parameter)}\n                </ParameterFoldableGroupC>\n            );\n        } else if (parameter instanceof BangParameter) {\n            return (\n                // <button onClick={this.handleButtonClick}>{`${parameter.label}`}</button>\n                <ParameterButtonC\n                    {...this.props}\n                    value={this.state.value}\n                    handleValue={this.handleButtonClick}\n                />\n            );\n        }\n\n        return;\n    }\n\n    render() {\n\n        const parameter = this.props.parameter;\n\n        if (!parameter) {\n            console.error(\"no parameter\");            \n            return (\n                <div>\n                    no parameter\n                </div>\n            );\n        }\n\n        return (        \n            <div style={{\n                marginTop: 20,\n                marginBottom: 0,\n            }}>\n                <Card interactive={false}>\n                    {this.renderValue(parameter)}                    \n                </Card>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport ParameterWidget from './ParameterWidget'\nimport { Alert, Intent, InputGroup, ControlGroup, Text } from '@blueprintjs/core';\nimport { Parameter, Client, WebSocketClientTransporter } from 'rabbitcontrol';\nimport { SSL_INFO_TEXT, SSL_INFO_TEXT_FIREFOX } from './Globals';\n\ntype Props = {\n};\n\ntype State = {\n    isConnected: boolean;\n    error?: string;\n    client?: Client;\n    host: string;\n    port: number;\n    parameters: Parameter[];\n};\n\nexport default class ConnectionDialog extends React.Component<Props, State> {\n    \n    private addTimer?: number;\n    private removeTimer?: number;\n    private myParameters: Parameter[] = [];\n\n    constructor(props: Props) {\n        super(props);\n\n        // is this the way??\n        this.state = {\n            isConnected: false,\n            host: window.location.hostname || 'localhost',\n            port: 10000,\n            parameters: [],\n        };\n    }\n\n    updateClient = () => {\n        if (this.state.client) {\n            this.state.client.update();\n        }\n    }\n\n    createParameterWidget(parameter: Parameter) {\n        return <ParameterWidget key={parameter.id}\n                                parameter={parameter} \n                                onSubmitCb={this.updateClient}/>;\n    }\n\n    createWidgets(parameter: Parameter[]) {\n        return parameter.map( (param) => { return this.createParameterWidget(param); });\n    }\n\n    setHost = (e: any) => {\n        this.setState({\n            host: e.currentTarget.value || \"localhost\",\n        });\n    }\n\n    setPort = (e: any) => {\n        this.setState({\n            port: parseInt(e.currentTarget.value, 10),\n        });\n    }\n\n    render() {\n\n        const host = this.state.host;\n        const port = this.state.port;\n\n        return <section>\n\n            {this.createWidgets(this.state.parameters)}\n\n            <Alert\n                className={\"bp3-dark\"}\n                confirmButtonText=\"Connect\"\n                icon=\"offline\"\n                intent={Intent.NONE}\n                isOpen={this.state.isConnected !== true }\n                onConfirm={this.handleAlertConfirm}\n            >\n                <Text><strong>Connect to a RabbitControl server</strong></Text>\n                <br/>\n                <br/>\n                <ControlGroup style={{alignItems: \"center\"}}>\n                    <Text>Host:&nbsp;</Text>\n                    <InputGroup\n                        value={host}\n                        type=\"text\"\n                        onChange={this.setHost}\n                    />\n                </ControlGroup>\n                <br/>\n                <ControlGroup style={{alignItems: \"center\"}}>\n                    <Text>Port:&nbsp;</Text>                    \n                    <InputGroup\n                        value={port.toFixed(0)}\n                        min={1024}\n                        max={65535}\n                        type=\"number\"\n                        onChange={this.setPort}\n                    />\n                </ControlGroup>\n                <br/>\n                <div>\n                    {this.state.error ? this.state.error : undefined}\n                    {this.returnSSLInfo()}\n                </div>\n\n            </Alert>\n        \n        </section>;\n    }\n\n    private returnSSLInfo() {\n        const isSSL = document.location ? document.location.toString().startsWith(\"https\") : false;\n        const isFirefox = navigator.userAgent.indexOf(\"Firefox\") != -1;\n\n        if (isSSL && isFirefox) {\n            return (\n                <div>\n                    <br/>\n                    {SSL_INFO_TEXT}\n                    <br/><br/>\n                    {SSL_INFO_TEXT_FIREFOX}\n                </div>\n            );\n        } else if (isSSL) {\n            return (\n                <div>\n                    <br/>\n                    {SSL_INFO_TEXT}\n                </div>\n            );\n        }\n    }\n\n    private handleAlertConfirm = () => {\n        this.doConnect();\n    }\n\n    private resetUI() {\n\n        this.stopTimers();\n\n        this.myParameters = [];\n\n        this.setState({\n            isConnected: false, \n            client: undefined, \n            parameters: this.myParameters,\n        });\n    }\n\n    private doDisconnect = () => {\n        console.log(\"DO DISCONNECT\");\n        \n        const client = this.state.client;\n\n        if (client) {\n            // clear callbacks\n            // TODO: do this in client\n            client.connected = undefined;\n            client.disconnected = undefined;            \n            client.onError = undefined;\n            client.parameterAdded = undefined;\n            client.parameterRemoved = undefined;\n\n            // dispose client\n            client.dispose();\n        }\n\n        this.resetUI();\n    }\n\n    private doConnect = () => {\n        Client.VERBOSE = true\n        const client = new Client(new WebSocketClientTransporter())\n\n        const { connected, disconnected, parameterAdded, parameterRemoved, onError } = this;\n        Object.assign(client, { connected, disconnected, parameterAdded, parameterRemoved, onError });\n\n        const host = this.state.host;\n        const port = this.state.port;\n        client.connect(host, port);\n        this.setState({\n            client, error: undefined\n        });\n    }\n\n    private connected = () => {\n        this.setState({\n            isConnected: true,\n        })\n        console.log(\"ConnectionDialog connected!\");\n    }\n\n    private disconnected = (event: CloseEvent) => {\n        console.log(\"ConnectionDialog disconneted: \" + JSON.stringify(event));\n        this.setState({\n            error: \"disconneted: \" + JSON.stringify(event)\n        });\n        this.resetUI();\n    }\n\n    private onError = () => {\n        console.log(\"error on socket!\")\n        this.setState({\n            error: \"error on socket!\",\n        });\n        this.resetUI();\n    }\n\n    /**\n     * \n     */\n    private parameterAdded = (parameter: Parameter) => {\n\n        if (!parameter.parent) {    \n            const params = this.myParameters.slice();\n            params.push(parameter);\n            this.myParameters = params;\n        }\n\n        // deferer setstate\n        if (this.addTimer !== undefined) {\n            window.clearTimeout(this.addTimer);\n            this.addTimer = undefined;\n        }\n\n        this.addTimer = window.setTimeout(() => {\n            this.setState({\n                parameters: this.myParameters,\n            });\n        }, 100);\n    }\n\n    private parameterRemoved = (parameter: Parameter) => {\n\n        const index = this.myParameters.indexOf(parameter, 0);\n        if (index > -1) {\n            const params = this.myParameters.splice(index, 1);\n            this.myParameters = params;\n        }\n\n        if (this.removeTimer!== undefined) {\n            window.clearTimeout(this.removeTimer);\n            this.removeTimer = undefined;\n        }\n\n        this.removeTimer = window.setTimeout(() => {\n            this.setState({\n                parameters: this.myParameters,\n            });\n        }, 100);\n    }\n\n    private stopTimers() {\n\n        if (this.addTimer !== undefined) {\n            window.clearTimeout(this.addTimer);\n            this.addTimer = undefined;\n        }\n\n        if (this.removeTimer!== undefined) {\n            window.clearTimeout(this.removeTimer);\n            this.removeTimer = undefined;\n        }\n\n    }\n\n} \n","import React, { Component } from 'react';\nimport './App.css';\nimport ConnectionDialog from './ConnectionDialog';\n\nclass App extends Component {\n\n  static VERBOSE_LOG = false;\n\n  render() {\n\n    return (\n      <section className={\"bp3-dark\"}>\n\n<div className=\"App\" style={{\n          margin: \"30px\",\n        }}>\n        <ConnectionDialog/>\n\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}